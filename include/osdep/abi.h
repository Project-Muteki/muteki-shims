/*
 * Copyright 2025 dogtopus
 * SPDX-License-Identifier: MIT
 */

/**
 * @file abi.h
 * @brief ABI compatibility helpers.
 */

#ifndef __OSDEP_ABI_H__
#define __OSDEP_ABI_H__

#if defined(__clang__)

// clang: Ignore unused parameter warning and clangd's warning on asm().
#define NO_EXPECTED_WARNINGS_BEGIN \
    _Pragma("clang diagnostic push") \
    _Pragma("clang diagnostic ignored \"-Wunused-parameter\"") \
    _Pragma("clang diagnostic ignored \"-Wlanguage-extension-token\"")
#define NO_EXPECTED_WARNINGS_END \
    _Pragma("clang diagnostic pop")

#elif defined(__GNUC__)  // !defined(__clang__)

// gcc: Ignore unused parameter warning.
#define NO_EXPECTED_WARNINGS_BEGIN \
    _Pragma("GCC diagnostic push") \
    _Pragma("GCC diagnostic ignored \"-Wunused-parameter\"")
#define NO_EXPECTED_WARNINGS_END \
    _Pragma("GCC diagnostic pop")

#else  // !defined(__GNUC__)

// No-op
#define NO_EXPECTED_WARNINGS_BEGIN
#define NO_EXPECTED_WARNINGS_END

#endif  // defined(__clang__) || defined(__GNUC__)

#define __APCS_WRAPPER_BASE(NAME, VA_LIST_NAME, STATIC, RETTYPE, ...) \
    NO_EXPECTED_WARNINGS_BEGIN \
    __attribute__((naked)) STATIC RETTYPE NAME(__VA_ARGS__) { \
        asm ( \
            /* x x x x | a0 a1 a2 a3 ... */ \
            "push {r0-r3}\n\t" \
            /* x x x x | <lr> a0 a1 a2 a3 ... */ \
            "push {lr}\n\t" \
            /* &a0 x x x | <lr> a0 a1 a2 a3 ... */ \
            "add r0, sp, #4\n\t" \
            /* &a0 x &<lr> x | <lr> a0 a1 a2 a3 ... */ \
            "mov r2, sp\n\t" \
            "tst r2, #7\n\t" \
            /* &a0 x flag x | [padding] <lr> a0 a1 a2 a3 ... */ \
            "mov r2, #0\n\t" \
            "subeq sp, sp, #4\n\t" \
            "moveq r2, #1\n\t" \
            /* &a0 x x x | flag [padding] <lr> a0 a1 a2 a3 ... */ \
            "push {r2}\n\t" \
            "bl __osdep_apcs_thunk_"#NAME "\n\t" \
            /* ret ret_hi flag x | [padding] <lr> a0 a1 a2 a3 ... */ \
            "pop {r2}\n\t" \
            "cmp r2, #0\n\t" \
            /* ret ret_hi flag x | <lr> a0 a1 a2 a3 ... */ \
            "addne sp, sp, #4\n\t" \
            /* ret ret_hi <lr> x | a0 a1 a2 a3 ... */ \
            "pop {r2}\n\t" \
            /* ret ret_hi <lr> x | ... */ \
            "add sp, sp, #16\n\t" \
            "bx r2" \
        ); \
    } \
    NO_EXPECTED_WARNINGS_END \
    __attribute__((used)) static RETTYPE __osdep_apcs_thunk_##NAME(va_list VA_LIST_NAME)

/**
 * @brief Create thunk for an APCS caller.
 * @details This macro generates a set of thunks that adapts a function using AAPCS calling convention for use with
 * an APCS caller. The syntax is as follows:
 *
 * @code{.c}
 * #include <stdarg.h>
 *
 * extern int test_eabi(int arg0, char *arg1);
 *
 * // Use void in place of the last 2 parameters is also acceptable if test() will not be passed as a callback
 * // with specific requirement on its function signature.
 * APCS_WRAPPER(test, args, int, int arg0, char *arg1) {
 *   int arg0 = va_arg(args, int);
 *   char *arg1 = va_arg(args, char *);
 *   return test_eabi(arg0, arg1);
 * }
 * @endcode
 *
 * @note It is recommended to use the scope block of this macro solely for defining a thunk to some other EABI
 * functions. In other words, any other program logic should generally be defined elsewhere and not inside the
 * scope block of this macro. One should also avoid calling the thunk generated by this macro directly from the
 * EABI land for performance and type safety reasons.
 *
 * @warning This wrapper does not align the variadic reader to 8-bytes, therefore if you want to read 64-bit values,
 * you need to do it with 2 separate 32-bit reads. This is the same for double values. For those, it's
 * better to read them as 2 integers, then concatenate them, and finally cast the result back to double.
 *
 * @param NAME Name of the thunk that will be called from APCS functions.
 * @param VA_LIST_NAME The name of the variadic list object.
 * @param RETTYPE Return type of the thunk. Used to match the signature of the outer thunk to those of a kernel
 * callback pointer.
 * @param ... Parameter signature of the outer thunk. Used to match the signature of the outer thunk to those of
 * a kernel callback pointer.
 */
#define APCS_WRAPPER(NAME, VA_LIST_NAME, RETTYPE, ...) \
    __APCS_WRAPPER_BASE(NAME, VA_LIST_NAME, , RETTYPE, __VA_ARGS__)

/**
 * @brief Same as APCS_WRAPPER(), but marks the outer thunk as `static`.
 *
 * @param NAME Name of the thunk that will be called from APCS functions.
 * @param VA_LIST_NAME The name of the variadic list object.
 * @param RETTYPE Return type of the thunk. Used to match the signature of the outer thunk to those of a kernel
 * callback pointer.
 * @param ... Parameter signature of the outer thunk. Used to match the signature of the outer thunk to those of
 * a kernel callback pointer.
 */
#define APCS_WRAPPER_STATIC(NAME, VA_LIST_NAME, RETTYPE, ...) \
    __APCS_WRAPPER_BASE(NAME, VA_LIST_NAME, static, RETTYPE, __VA_ARGS__)

#endif  // __OSDEP_ABI_H__
